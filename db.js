const DB = {
    chapters: [
        { 
            id: 'intro', 
            title: 'بادئة: رسالة لصانع العوالم', 
            icon: '📜',
            markdownContent: `
# **رحلة بناء العوالم الرقمية**
## **دليلك الكامل لتعلم البرمجة وصناعة الأفكار بلغة بايثون**

---

### **بادئة الكتاب: رسالة إلى صانع العوالم**

مرحبًا بك أيها المستكشف الذكي،

أنت تقف الآن على عتبة عالمٍ جديد. عالم لا يقل سحرًا أو إثارة عن العوالم التي تحب أن تخوض مغامراتك فيها عبر شاشة حاسوبك. في ألعابك المفضلة، أنت ترى شخصيات أسطورية، وقوانين فيزيائية خاصة، وقصصًا مذهلة تتكشف أمامك. لكن هل توقفت يومًا لتسأل: من هو الساحر الذي يقف خلف كل هذا؟

هذا الساحر ليس كائنًا خرافيًا، بل هو شخص حقيقي جدًا. إنه **المبرمج**. مهندس ومبدع وفنان، يستخدم لغة خاصة ليخاطب بها الآلة، ويأمرها بأن تبني له ما يتخيله بالضبط. المبرمج هو من يكتب القواعد، ويصمم الشخصيات، ويبني القلاع، ويضع الكنوز في أماكنها السرية.

هذا الكتاب هو بوابتك لتكون أنت هذا الساحر.

بين يديك الآن ليست مجرد مجموعة من الدروس، بل هي خريطة كنز حقيقية، ستقودك خطوة بخطوة في رحلة لتعلم **بايثون (Python)**، إحدى أقوى لغات البرمجة وأكثرها طلبًا في العالم. هي لغة بسيطة بما يكفي ليقرأها الإنسان بسهولة، وقوية بما يكفي لتستخدمها شركات عملاقة مثل Google و YouTube و Netflix لبناء أعقد أنظمتها.

**فلسفة هذا الكتاب بسيطة جدًا، وتقوم على قاعدتين ذهبيتين:**

1.  **الفهم أولًا، ثم الانتقال:** لن ننتقل من فصل إلى الذي يليه إلا بعد أن تفهم كل مفهوم فهمًا حقيقيًا وعميقًا. البرمجة تشبه بناء برج من الليجو، كل قطعة تعتمد على القطعة التي تحتها. إذا كانت إحدى القطع مهزوزة، سينهار البرج بأكمله.
2.  **المكافأة هي احتفال بالفهم:** في نهاية كل فصل، ستجد مهمة وتحديًا. هذه المهمة ليست اختبارًا للحفظ، بل هي قياس لفهمك. والمكافأة التي ستحصل عليها هي احتفال حقيقي بأن عقلك قد استوعب قوة جديدة.

هل أنت مستعد لتنتقل من مقعد اللاعب إلى كرسي الصانع؟
هيا بنا نبدأ المغامرة. **انقر على "الفصل الأول" في القائمة الجانبية لتبدأ رحلتك!**`
        },
        { 
            id: 'chapter1', 
            title: 'الفصل الأول: أول حوار', 
            icon: '💬',
            mission: {
                placeholder: `# المهمة: اكتب برنامجًا من ثلاثة أسطر يطبع:
# 1. اسمك
# 2. عمرك
# 3. اسم لعبتك المفضلة
# استخدم 3 جمل print منفصلة.`,
                validate: (code, output) => {
                    const lines = output.split('\n').filter(line => line.trim() !== '');
                    const printCount = (code.match(/print\s*\(/g) || []).length;
                    if (printCount < 3) {
                        return { pass: false, message: 'يجب أن تستخدم دالة `print()` ثلاث مرات على الأقل!' };
                    }
                    if (lines.length < 3) {
                        return { pass: false, message: 'لم تطبع ثلاثة أسطر! تأكد من أن كل جملة print في سطر منفصل.' };
                    }
                    return { pass: true, message: 'عمل رائع! لقد أجريت أول حوار ناجح مع الآلة.' };
                }
            },
            markdownContent: `
## **الفصل الأول: أول حوار مع الآلة**

في هذا الفصل، سنكسر الحاجز بيننا وبين الحاسوب. سنتعلم كيف نجعله "يتكلم" وينفذ أول أمر حقيقي لنا. سنكتب أول سطر كود، ونرى نتيجته المباشرة على الشاشة. إنها اللحظة التي تتحول فيها من مجرد مستخدم للحاسوب إلى متحكم فيه.

### **1.1 - من هو الحاسوب؟ وما هي البرمجة؟**

تخيل أن **الحاسوب (Computer)** هو مساعد شخصي عبقري، مطيع جدًا، وسريع بشكل لا يصدق. لكن لديه نقطة ضعف واحدة: إنه لا يمتلك أي ذكاء من تلقاء نفسه. إنه لا يفهم التلميحات.

هنا يأتي دور **البرمجة (Programming)**. البرمجة هي فن كتابة "وصفة طعام" دقيقة للحاسوب. وبما أن الحاسوب لا يفهم لغتنا البشرية، فنحن نستخدم لغات خاصة تسمى "لغات البرمجة" (مثل بايثون) لتكون المترجم بين أفكارنا والتعليمات التي يفهمها هو.

### **1.2 - تجهيز معملك الرقمي**

لكل عالم معمله الخاص، ومعملنا لكتابة برامج بايثون بسيط جدًا. لحسن الحظ، هذا الموقع هو معملك الرقمي المتكامل! أنت لا تحتاج إلى تثبيت أي شيء. كل ما تحتاجه هو هذا المتصفح.

### **1.3 - الأمر الأول: \`print()\`**

حان وقت العمل. افتح محرر الأكواد في الأسفل، واكتب السطر التالي، ثم اضغط "شغّل الكود".

\`\`\`python
print("مرحبًا أيها العالم!")
\`\`\`

**تهانينا! لقد كتبت للتو أول برنامج حقيقي لك.** لقد أمرت الحاسوب بأن يعرض رسالة، وقد أطاعك تمامًا.

**التعليقات (Comments):** لاحظ الأسطر التي تبدأ بعلامة \`#\`. هذه تسمى "تعليقات". الحاسوب يتجاهلها تمامًا. فائدتها هي أن تترك ملاحظات لنفسك أو للمبرمجين الآخرين لشرح الكود.

\`\`\`python
# السطر الأول يطبع رسالة ترحيب
print("مرحبًا أيها العالم!")

# هذا السطر الثاني سيطبع اسم لعبتك المفضلة
print("The Legend of Zelda") # يمكنك تغييرها لاسم لعبتك
\`\`\`

### **1.4 - نظرة أعمق: الدوال، النصوص، والوسائط**

لنقم بتشريح السطر \`print("مرحبًا أيها العالم!")\`:

*   **\`print\`**: هذا هو اسم **الدالة (Function)**. تخيلها كآلة متخصصة وظيفتها الوحيدة هي "الطباعة على الشاشة".
*   **\`()\`**: الأقواس هي المكان الذي نضع فيه "المواد الخام" التي ستعمل عليها الآلة.
*   **\`"مرحبًا أيها العالم!"\`**: هذه هي المادة الخام، وتسمى **وسيط (Argument)**. وضعناها بين علامتي اقتباس \`""\` لنخبر بايثون أن هذه مجرد حروف، وهو ما يسمى **نص (String)**.

### **1.5 - لا تخف من اللون الأحمر: فهم الأخطاء**

أثناء رحلتك، سترتكب أخطاءً. وهذا أمر طبيعي وممتاز! الخطأ ليس فشلاً، بل هو طريقة الحاسوب ليقول لك: "لم أفهم ما قصدته، هل يمكنك توضيح طلبك؟".

جرب أن ترتكب خطأ عمدًا. اكتب السطر التالي وشغّله:

\`\`\`python
print(مرحبًا)
\`\`\`
ستظهر لك رسالة خطأ مثل \`NameError: name 'مرحبًا' is not defined\`. هذا لأن بايثون، بدون علامات الاقتباس، ظن أن \`مرحبًا\` هو اسم متغير أو دالة، لكنه لم يجدها.

<div class="mission-section" id="mission-chapter1">
    <h3>🚀 مهمتك الأولى (مفتاح المكافأة)</h3>
    <p>لإثبات فهمك الكامل لهذا الفصل، قم بإنجاز المهمة التالية:</p>
    <p><strong>المهمة:</strong> اكتب برنامجًا من ثلاثة أسطر. السطر الأول يطبع اسمك، والثاني يطبع عمرك، والثالث يطبع اسم لعبتك المفضلة.</p>
    <div id="mission-editor-chapter1" class="mission-editor"></div>
    <pre class="code-output" id="mission-output-chapter1"></pre>
    <div class="mission-controls">
        <button class="mission-btn" data-chapter-id="chapter1">إتمام المهمة</button>
        <button class="mission-btn download-code-btn" data-chapter-id="chapter1">تحميل الكود</button>
    </div>
</div>
`
        },
        {
            id: 'chapter2',
            title: 'الفصل الثاني: الذاكرة السحرية',
            icon: '📦',
            mission: {
                placeholder: `# المهمة: الآلة الحاسبة البسيطة
# 1. اسأل المستخدم عن رقمين باستخدام input()
# 2. حولهما إلى أعداد صحيحة باستخدام int()
# 3. اجمعهما، ثم اطرحهما، ثم اضربهما
# 4. اطبع ناتج كل عملية في سطر منفصل مع جملة توضيحية

num1_str = input("أدخل الرقم الأول: ")
# ... أكمل الكود هنا ...
`,
                validate: (code, output) => {
                    if ((code.match(/input/g) || []).length < 2) return { pass: false, message: 'يجب أن تستخدم `input()` مرتين لسؤال المستخدم عن الرقمين.' };
                    if ((code.match(/int/g) || []).length < 2) return { pass: false, message: 'لا تنس تحويل المدخلات إلى أرقام باستخدام `int()`.' };
                    if (!code.includes('+') || !code.includes('-') || !code.includes('*')) return { pass: false, message: 'تأكد من إجراء عمليات الجمع والطرح والضرب.' };
                    if ((output.match(/ناتج/g) || []).length < 3) return { pass: false, message: 'هل طبعت ناتج كل عملية في جملة توضيحية منفصلة؟' };
                    return { pass: true, message: 'ذاكرة ممتازة! لقد جعلت الحاسوب يتذكر ويحسب.' };
                }
            },
            markdownContent: `
## **الفصل الثاني: ذاكرة الحاسوب السحرية (المتغيرات)**

في الفصل السابق، نجحنا في إجراء أول حوار لنا مع الحاسوب. لكن برامجنا كانت لديها ذاكرة قصيرة جدًا. في هذا الفصل، سنمنح برنامجنا ذاكرة.

### **2.1 - لماذا نحتاج إلى ذاكرة؟**

تخيل أنك تلعب لعبة مغامرات. يجب على الحاسوب أن **يتذكر** اسم شخصيتك ونقاطك ومحتويات حقيبتك. إذا كان الحاسوب ينسى هذه المعلومات كل ثانية، ستكون اللعبة مستحيلة! لهذا السبب، نحتاج إلى **المتغيرات**.

### **2.2 - المتغيرات: الصناديق السحرية**

**المتغير (Variable)** هو أبسط طريقة لتخزين معلومة في ذاكرة الحاسوب. تخيلها كـ "صندوق سحري" تلصق عليه "ملصق اسم" وتضع بداخله "قيمة".

لإنشاء متغير، نستخدم **عامل الإسناد (Assignment Operator)** وهو علامة التساوي (\`=\`).
> **تحذير مهم:** علامة \`=\` في البرمجة لا تعني "يساوي" كما في الرياضيات. هي تعني: **"خذ القيمة التي على اليمين، وضعها في الصندوق الذي على اليسار"**.

\`\`\`python
# هنا ننشئ صندوقًا اسمه player_name ونضع فيه نصًا
player_name = "الفارس الشجاع"

# وهنا ننشئ صندوقًا آخر اسمه player_score ونضع فيه رقمًا
player_score = 0

print(player_name)
print(player_score)
\`\`\`
يمكننا تحديث قيمة المتغير:
\`\`\`python
player_score = 50
print("نقاطك الآن:", player_score)

# خذ القيمة الحالية (50)، أضف إليها 100، وخزن النتيجة (150) مرة أخرى
player_score = player_score + 100
print("بعد إكمال المهمة:", player_score)
\`\`\`

### **2.3 - أنواع البيانات: النصوص والأرقام**

*   **الأعداد الصحيحة (Integers):** هي أرقام كاملة مثل \`150\` يمكنك إجراء عمليات حسابية عليها.
*   **النصوص (Strings):** هي سلسلة من الحروف مثل \`"100"\`. لا يمكنك إجراء عمليات حسابية عليها.

\`\`\`python
# جمع الأرقام (Integers)
sum_of_numbers = 100 + 50
print("ناتج جمع الأرقام هو:", sum_of_numbers) # سيطبع 150

# "جمع" النصوص (Strings)
sum_of_strings = "100" + "50"
print("ناتج 'جمع' النصوص هو:", sum_of_strings) # سيطبع "10050"
\`\`\`

### **2.4 - لنجعل البرنامج تفاعليًا: دالة \`input()\`**

الدالة \`input()\` تجعل البرنامج يستمع للمستخدم.
> **ملاحظة:** في بيئتنا هذه، ستظهر لك نافذة منبثقة لإدخال النص عند استخدام \`input()\`.

\`\`\`python
print("مرحبًا! أنا برنامج ذكي.")
user_name = input("ما هو اسمك أيها المستخدم؟ ")

print("أهلاً بك يا " + user_name + "! يسعدني التعرف عليك.")
\`\`\`

**الفخ الخفي في \`input()\`!** دائمًا تُعيد نصًا **(String)**، حتى لو أدخل المستخدم أرقامًا.

### **2.5 - فن التحويل: \`int()\` و \`str()\`**

لحل هذه المشكلة، نستخدم دوال التحويل:
*   **\`int(value)\`**: تحول نصًا يحتوي على أرقام (مثل \`"25"\`) إلى رقم حقيقي (\`25\`).
*   **\`str(value)\`**: تحول أي شيء (مثل الرقم \`25\`) إلى نسخته النصية (\`"25"\`).

### **2.6 - الكود في العمل: آلة حساب العمر**

هنا نجمع كل ما تعلمناه. لاحظ أننا لا نستطيع الحصول على السنة الحالية تلقائيًا بسهولة هنا، لذلك سنقوم بتثبيتها.

\`\`\`python
# سنعتبر أن السنة الحالية هي 2024 لتبسيط الأمر
current_year = 2024

print("--- آلة حساب العمر الذكية ---")
user_name = input("ما هو اسمك؟ ")
birth_year_str = input("في أي سنة ميلادية ولدت؟ ")

# 1. نحول سنة الميلاد من نص إلى رقم
birth_year_int = int(birth_year_str)

# 2. نقوم بالعملية الحسابية
age = current_year - birth_year_int

# 3. نحول العمر (الرقم) إلى نص لدمجه مع الجملة
print("مرحبًا يا " + user_name + "، عمرك هذا العام هو تقريبًا " + str(age) + " عامًا.")
\`\`\`

<div class="mission-section" id="mission-chapter2">
    <h3>🚀 مهمتك الثانية (مفتاح المكافأة)</h3>
    <p><strong>المهمة (الآلة الحاسبة البسيطة):</strong> اكتب برنامجًا يسأل المستخدم عن رقمين. ثم يطبع البرنامج ناتج جمعهما، وطرحهما، وضربهما في أسطر منفصلة. (تذكر: ستحتاج إلى \`input()\` و \`int()\`).</p>
    <div id="mission-editor-chapter2" class="mission-editor"></div>
    <pre class="code-output" id="mission-output-chapter2"></pre>
    <div class="mission-controls">
        <button class="mission-btn" data-chapter-id="chapter2">إتمام المهمة</button>
        <button class="mission-btn download-code-btn" data-chapter-id="chapter2">تحميل الكود</button>
    </div>
</div>
`
        },
        {
            id: 'chapter3',
            title: 'الفصل الثالث: التفكير المنطقي',
            icon: '🧠',
            mission: {
                placeholder: `# المهمة: حارس بوابة النادي
# اسأل المستخدم عن عمره.
# إذا كان عمره بين 13 و 19 (شاملة)، رحب به.
# إذا كان أصغر، قل له "النادي للمراهقين فقط".
# إذا كان أكبر، قل له "لقد كبرت على هذا النادي!".
# تلميح: استخدم and للربط بين شرطين.
# if age >= 13 and age <= 19:

age_str = input("كم عمرك؟ ")
age = int(age_str)

# ... أكمل الكود هنا باستخدام if/elif/else ...
`,
                validate: (code, output) => {
                    if (!code.includes('if') || !code.includes('elif') || !code.includes('else')) return { pass: false, message: 'تأكد من استخدام `if` و `elif` و `else` لتغطية كل الحالات الممكنة.' };
                    if (!code.includes('and')) return { pass: false, message: 'هل استخدمت الكلمة `and` للتحقق من أن العمر يقع بين قيمتين؟' };
                    if ((code.match(/input/g) || []).length < 1) return { pass: false, message: 'لا تنس أن تسأل المستخدم عن عمره أولاً.' };
                    if (output.trim() === '') return { pass: false, message: 'لم يطبع برنامجك أي شيء!' };
                    return { pass: true, message: 'تفكير منطقي سليم! لقد أصبح برنامجك حارسًا ذكيًا.' };
                }
            },
            markdownContent: `
## **الفصل الثالث: عندما يبدأ الحاسوب بالتفكير (الشروط والمنطق)**

في هذا الفصل، سنجعل برامجنا قادرة على اتخاذ قرارات مختلفة بناءً على الظروف المتغيرة. سنمنحها أول شكل من أشكال الذكاء.

### **3.1 - لماذا تحتاج البرامج إلى اتخاذ القرارات؟**

فكر في أي لعبة تحبها. إنها مليئة بالقرارات:
*   **إذا** كانت صحة اللاعب صفر، **إذًا** اعرض شاشة "انتهت اللعبة".
*   **إذا** كانت إجابة اللاعب صحيحة، **إذًا** أعطه جائزة.
*   **وإلا**، قل له "حاول مرة أخرى".
هذه "إذا... إذًا... وإلا..." هي جوهر ما يجعل البرامج تبدو ذكية. في بايثون، نطبق هذا المنطق باستخدام **الجمل الشرطية (Conditional Statements)**.

### **3.2 - الأداة الأساسية: جملة \`if\`**

جملة \`if\` تسمح لنا بتنفيذ كتلة من الكود فقط **إذا كان شرط معين صحيحًا**.

\`\`\`python
if condition:
    # الكود الذي سيتم تنفيذه إذا كان الشرط صحيحًا (True)
    # لاحظ المسافة البادئة (Indentation) هنا!
\`\`\`
**المسافة البادئة (Indentation):** المسافة في بداية السطر (عادة 4 مسافات) بالغة الأهمية. إنها الطريقة التي تخبر بها بايثون أن هذا الكود "تابع" لجملة \`if\`.

### **3.3 - صناعة الشروط: عوامل المقارنة**

الشرط هو أي تعبير يمكن أن تكون نتيجته النهائية إما **\`True\`** (صحيح) أو **\`False\`** (خاطئ). لصناعة هذه الشروط، نستخدم **عوامل المقارنة (Comparison Operators)**.
*   \`==\` هل يساوي؟
*   \`!=\` هل لا يساوي؟
*   \`>\` هل هو أكبر من؟
*   \`<\` هل هو أصغر من؟
*   \`>=\` هل هو أكبر من أو يساوي؟
*   \`<=\` هل هو أصغر من أو يساوي؟

> **الخطأ الأكثر شيوعًا:** الخلط بين \`=\` و \`==\`.
> *   \`=\` (علامة واحدة): **للإسناد** (تخزين قيمة في متغير).
> *   \`==\` (علامتان): **للمقارنة** (طرح سؤال نتيجته \`True\` أو \`False\`).

### **3.4 - الخطة البديلة: جملة \`else\`**

\`else\` تعطينا كتلة كود بديلة يتم تنفيذها فقط إذا كان شرط \`if\` الأصلي **خاطئًا (\`False\`)**.

\`\`\`python
player_health = 15
if player_health <= 0:
    print("للأسف... لقد هُزمت. Game Over!")
else:
    print("ما زلت على قيد الحياة. قاتل بشجاعة!")
\`\`\`

### **3.5 - عندما تتعدد الخيارات: جملة \`elif\`**

نستخدم \`elif\`، وهي اختصار لكلمتي **"else if"**، لإضافة شروط إضافية ليتم التحقق منها بالترتيب.

\`\`\`python
grade = 85

if grade >= 90:
    print("التقدير: ممتاز (A)")
elif grade >= 80:
    print("التقدير: جيد جدًا (B)")
elif grade >= 70:
    print("التقدير: جيد (C)")
else:
    print("التقدير: يحتاج لتحسين (F)")
\`\`\`
بايثون يتوقف عند أول شرط صحيح يجده، ينفذ الكود التابع له، ثم **يتجاهل تمامًا كل ما تبقى** من شروط \`elif\` و \`else\` في هذه السلسلة.

<div class="mission-section" id="mission-chapter3">
    <h3>🚀 مهمتك الثالثة (مفتاح المكافأة)</h3>
    <p><strong>المهمة (حارس بوابة النادي):</strong> اكتب برنامجًا يسأل المستخدم عن عمره.</p>
    <ul>
        <li>إذا كان عمره بين 13 و 19 (شاملة)، اطبع "مرحبًا بك في نادي المراهقين!". (تلميح: استخدم <code>and</code> لربط شرطين معًا: <code>if age >= 13 and age <= 19:</code>).</li>
        <li>إذا كان عمره أقل من 13، استخدم <code>elif</code> لطباعة "للأسف، النادي مخصص للمراهقين فقط".</li>
        <li>لأي عمر آخر (أكبر من 19)، استخدم <code>else</code> لطباعة "لقد كبرت على هذا النادي!".</li>
    </ul>
    <div id="mission-editor-chapter3" class="mission-editor"></div>
    <pre class="code-output" id="mission-output-chapter3"></pre>
    <div class="mission-controls">
        <button class="mission-btn" data-chapter-id="chapter3">إتمام المهمة</button>
        <button class="mission-btn download-code-btn" data-chapter-id="chapter3">تحميل الكود</button>
    </div>
</div>
`
        },
                {
            id: 'chapter4',
            title: 'الفصل الرابع: قوة التكرار',
            icon: '🔄',
            mission: {
                placeholder: `# المهمة: جدول الضرب
# 1. اسأل المستخدم عن رقم.
# 2. استخدم حلقة for و range() لطباعة جدول الضرب
#    الخاص بهذا الرقم من 1 إلى 10.
# 3. يجب أن يكون الناتج منسقًا. مثال للرقم 7:
# 7 x 1 = 7
# 7 x 2 = 14
# ... وهكذا

num_str = input("أدخل رقمًا لعرض جدول الضرب الخاص به: ")
num = int(num_str)

# ... أكمل الكود هنا باستخدام حلقة for ...
`,
                validate: (code, output) => {
                    if (!code.includes('for') || !code.includes('in') || !code.includes('range')) return { pass: false, message: 'تأكد من استخدام حلقة `for` مع `in` و `range()`.' };
                    if ((output.match(/=/g) || []).length < 10) return { pass: false, message: 'هل طبعت 10 أسطر، كل منها يحتوي على ناتج الضرب؟' };
                    if (!output.includes('x')) return { pass: false, message: 'هل نسيت تنسيق الطباعة لتشبه "7 x 1 = 7"؟' };
                    return { pass: true, message: 'قوة مذهلة! لقد أتمتت مهمة متكررة بنجاح.' };
                }
            },
            markdownContent: `
## **الفصل الرابع: قوة التكرار الخارقة (الحلقات)**

المبرمجون يكرهون تكرار أنفسهم. إذا أردنا طباعة الأرقام من 1 إلى 100، لن نكتب 100 سطر \`print\`. بدلاً من ذلك، نستخدم **الحلقات (Loops)** لتنفيذ نفس الكود عدة مرات بشكل تلقائي.

### **4.1 - مشكلة التكرار اليدوي**

تخيل عداد إطلاق صاروخ. بدون حلقات، سيبدو هكذا:
\`\`\`python
print("10")
print("9")
# ... وهكذا ...
print("1")
print("إطلاق!")
\`\`\`
هذا الكود طويل وممل وصعب التعديل. الحلقات هي الحل.

### **4.2 - الحلقة الأولى: \`for\` (التكرار المحدد)**

نستخدم حلقة \`for\` عندما نعرف **مسبقًا عدد المرات** التي نريد فيها تكرار الكود. غالبًا ما نستخدمها مع دالة \`range()\`.
*   \`range(5)\` تنشئ سلسلة من الأرقام: \`0, 1, 2, 3, 4\`.
*   \`range(1, 6)\` تنشئ سلسلة: \`1, 2, 3, 4, 5\` (تبدأ من الرقم الأول وتنتهي **قبل** الرقم الأخير).
*   \`range(10, 0, -1)\` تنشئ سلسلة تنازلية: \`10, 9, ... , 1\`.

الصيغة العامة:
\`\`\`python
for variable_name in sequence:
    # الكود الذي سيتم تكراره
\`\`\`
لنعد كتابة مثال عداد الصاروخ:
\`\`\`python
print("بدء العد التنازلي...")
for number in range(10, 0, -1):
    print(number)
print("إطلاق!")
\`\`\`

### **4.3 - الحلقة الثانية: \`while\` (التكرار المشروط)**

نستخدم \`while\` عندما **لا نعرف بالضبط عدد المرات** التي سنكرر فيها الكود، لكننا نعرف **الشرط الذي يجب أن يستمر التكرار طالما هو صحيح**.

> **التحذير الأخطر في البرمجة: الحلقة اللانهائية (Infinite Loop)!**
> مع حلقة \`while\`, يجب أن تتأكد من أن هناك شيئًا ما *داخل* الحلقة يغير الحالة ويجعل الشرط \`False\` في النهاية. إذا نسيت ذلك، سيعلق برنامجك إلى الأبد.

لنطبق مثال هزيمة وحش:
\`\`\`python
monster_health = 100
attack_damage = 15

# طالما أن هذا الشرط صحيح، استمر في التكرار
while monster_health > 0:
    print("صحة الوحش الآن:", monster_health, "- أنت تهاجم!")
    
    # هذا هو السطر الذي يمنع الحلقة اللانهائية!
    monster_health = monster_health - attack_damage

print("\\nلقد هزمت الوحش!")
\`\`\`

### **4.4 - \`for\` مقابل \`while\`: متى أستخدم أيهما؟**

*   استخدم **\`for\`** عندما تعرف عدد التكرارات مسبقًا (مثلاً: "اطبع الأرقام من 1 إلى 10").
*   استخدم **\`while\`** عندما يعتمد التكرار على شرط قد يتغير (مثلاً: "استمر في طلب كلمة المرور حتى يدخلها المستخدم بشكل صحيح").

### **4.5 - كلمات مفتاحية إضافية: \`break\` و \`continue\`**

*   \`break\`: تخرج من الحلقة فورًا.
*   \`continue\`: تتجاهل بقية الكود في الدورة الحالية وتنتقل إلى الدورة التالية من الحلقة.

\`\`\`python
# مثال على break: ابحث عن أول رقم يقبل القسمة على 7
for i in range(1, 20):
    if i % 7 == 0:
        print(f"وجدت أول رقم يقبل القسمة على 7: {i}")
        break # اخرج من الحلقة
    print(f"الرقم {i} لا يقبل القسمة على 7...")
\`\`\`

<div class="mission-section" id="mission-chapter4">
    <h3>🚀 مهمتك الرابعة (مفتاح المكافأة)</h3>
    <p><strong>المهمة (جدول الضرب):</strong> اكتب برنامجًا يسأل المستخدم عن رقم. ثم استخدم حلقة <code>for</code> لطباعة جدول الضرب الكامل لهذا الرقم (من 1 إلى 10). يجب أن يكون الناتج منسقًا بشكل جيد (مثال: <code>7 x 1 = 7</code>).</p>
    <div id="mission-editor-chapter4" class="mission-editor"></div>
    <pre class="code-output" id="mission-output-chapter4"></pre>
    <div class="mission-controls">
        <button class="mission-btn" data-chapter-id="chapter4">إتمام المهمة</button>
        <button class="mission-btn download-code-btn" data-chapter-id="chapter4">تحميل الكود</button>
    </div>
</div>
`
        },
        {
            id: 'chapter5',
            title: 'الفصل الخامس: بناء الأدوات',
            icon: '🛠️',
            mission: {
                placeholder: `# المهمة: فاحص الأرقام
# 1. عرف دالة اسمها is_even تأخذ بارامتر واحد (number).
# 2. داخل الدالة، تحقق إذا كان الرقم زوجيًا.
#    (تلميح: الرقم يكون زوجيًا إذا كان باقي قسمته على 2 هو 0)
#    number % 2 == 0
# 3. يجب أن تعيد الدالة True إذا كان الرقم زوجيًا، و False إذا كان فرديًا.
#    استخدم كلمة return.
# 4. خارج الدالة، استدعها مع أرقام مختلفة واطبع النتيجة.

def is_even(number):
    # ... أكمل الكود هنا ...

# استدعاء الدالة
result1 = is_even(10)
print(f"هل الرقم 10 زوجي؟ {result1}")

result2 = is_even(7)
print(f"هل الرقم 7 زوجي؟ {result2}")
`,
                validate: (code, output) => {
                    if (!code.includes('def') || !code.includes('is_even')) return { pass: false, message: 'هل قمت بتعريف دالة جديدة باستخدام `def` وأعطيتها اسم `is_even`؟' };
                    if (!code.includes('return')) return { pass: false, message: 'مهم جدًا! يجب أن تستخدم `return` لتعيد الدالة قيمة، لا أن تطبعها.' };
                    if (!code.includes('% 2 == 0')) return { pass: false, message: 'تأكد من استخدام عامل باقي القسمة `%` للتحقق من زوجية الرقم.' };
                    if (!output.includes('True') || !output.includes('False')) return { pass: false, message: 'هل استدعيت الدالة وطبعت القيمة التي أعادتها؟ يجب أن أرى `True` و `False` في المخرجات.' };
                    return { pass: true, message: 'عمل هندسي رائع! لقد صنعت أول أداة خاصة بك.' };
                }
            },
            markdownContent: `
## **الفصل الخامس: كن أنت الصانع (بناء الدوال الخاصة بك)**

حتى الآن، كنا نستخدم أدوات جاهزة مثل \`print()\` و \`int()\`. في هذا الفصل، سنتعلم كيف نصنع "أدواتنا" الخاصة التي يمكننا استخدامها مرارًا وتكرارًا. هذه الأدوات تسمى **الدوال (Functions)**.

### **5.1 - لماذا نصنع أدواتنا بأنفسنا؟**

تخيل أنك في كل مرة تبدأ مستوى جديدًا في لعبة تحتاج لعرض رسالة ترحيب من 3 أسطر. بدلاً من تكرار كتابة الكود، يمكننا وضعه داخل دالة ونستدعيها باسمها فقط. هذا يجعل الكود:
1.  **منظمًا (Organization):** يسهل قراءة البرنامج وفهمه.
2.  **قابلًا لإعادة الاستخدام (Reusability):** تكتبه مرة، وتستخدمه مئات المرات.
3.  **سهل الصيانة (Maintainability):** تعدله في مكان واحد، فيتغير في كل مكان.

### **5.2 - تشريح الدالة: \`def\` و \`()\` و \`:\`**

لتعريف دالة جديدة، نستخدم كلمة \`def\` (اختصار define).

\`\`\`python
def function_name():
    # الكود الذي سيتم تنفيذه عند استدعاء الدالة
    # كل هذا الكود يجب أن يكون مزاحًا للداخل (Indented)
\`\`\`
**ملاحظة هامة:** "تعريف" الدالة لا يشغلها. هو فقط يشرح لبايثون ما الذي يجب أن تفعله عندما يتم "استدعاؤها" لاحقًا.
\`\`\`python
# 1. تعريف الدالة (هنا نحن نبني الأداة)
def show_welcome_banner():
    print("====================================")
    print("   مرحبًا بك في لعبة المغامرات!   ")
    print("====================================")

# 2. استدعاء الدالة (هنا نحن نستخدم الأداة)
show_welcome_banner()
\`\`\`

### **5.3 - جعل الدوال أكثر ذكاءً: البارامترات والوسائط**

أحيانًا، نريد تمرير معلومات **إلى** الدالة. نفعل هذا باستخدام **البارامترات (Parameters)**.
*   **البارامتر (Parameter):** هو متغير خاص نضعه داخل الأقواس \`()\` عند تعريف الدالة، ليكون بمثابة "مستقبل" للمعلومات.
*   **الوسيط (Argument):** هو القيمة الحقيقية التي نرسلها إلى الدالة عندما نستدعيها.

\`\`\`python
# player_name هنا هو "بارامتر"
def greet_player_by_name(player_name):
    print(f"مرحبًا يا {player_name}! أتمنى لك حظًا سعيدًا.")

# "علي" و "فاطمة" هنا هما "وسيطان"
greet_player_by_name("علي")
greet_player_by_name("فاطمة")
\`\`\`

### **5.4 - القوة الحقيقية: الدوال التي تُعيد قيمة (\`return\`)**

أحيانًا، نريد من الدالة أن تقوم بحساب شيء ما، ثم **تعطينا الناتج** لنستخدمه في مكان آخر. الكلمة المفتاحية التي تسمح بذلك هي \`return\`.

عندما يصل بايثون إلى سطر \`return\`، فإنه يوقف تنفيذ الدالة فورًا ويأخذ القيمة التي تليها ويرسلها عائدًا إلى المكان الذي تم استدعاء الدالة منه.

\`\`\`python
def add_two_numbers(num1, num2):
    result = num1 + num2
    return result # لا تطبع شيئًا، فقط أعد الناتج

# الآن لنستخدم هذه الدالة
sum_result = add_two_numbers(10, 5) # سيتم حساب 15، وإعادتها، وتخزينها في sum_result
print(f"ناتج الجمع هو: {sum_result}")
\`\`\`

<div class="mission-section" id="mission-chapter5">
    <h3>🚀 مهمتك الخامسة (مفتاح المكافأة)</h3>
    <p><strong>المهمة (فاحص الأرقام):</strong> اكتب دالة اسمها <code>is_even</code> تأخذ رقمًا (<code>number</code>) كبارامتر. يجب أن تُعيد الدالة القيمة المنطقية <code>True</code> إذا كان الرقم زوجيًا، و <code>False</code> إذا كان فرديًا. (تلميح: استخدم عامل باقي القسمة <code>%</code>). ثم اكتب كودًا يستدعي الدالة مع أرقام مختلفة ويطبع النتيجة.</p>
    <div id="mission-editor-chapter5" class="mission-editor"></div>
    <pre class="code-output" id="mission-output-chapter5"></pre>
    <div class="mission-controls">
        <button class="mission-btn" data-chapter-id="chapter5">إتمام المهمة</button>
        <button class="mission-btn download-code-btn" data-chapter-id="chapter5">تحميل الكود</button>
    </div>
</div>
`
        },
        {
            id: 'chapter6',
            title: 'الفصل السادس: نظرة للمستقبل',
            icon: '🔭',
            mission: {
                placeholder: `# المهمة: حقيبة اللاعب
# 1. أنشئ قائمة (List) اسمها inventory تحتوي على 3 أسلحة نصية.
#    مثال: ["سيف", "قوس", "فأس"]
# 2. اطبع أول عنصر في الحقيبة.
#    تذكر: الفهرس يبدأ من صفر! inventory[0]
# 3. استخدم حلقة for للمرور على كل عنصر في الحقيبة وطباعته.

# ... أكمل الكود هنا ...
`,
                validate: (code, output) => {
                    if (!code.includes('[') || !code.includes(']')) return { pass: false, message: 'هل استخدمت الأقواس المربعة `[]` لإنشاء القائمة؟' };
                    if (!code.includes('inventory[0]')) return { pass: false, message: 'تأكد من أنك طبعت العنصر الأول باستخدام الفهرس `[0]`.' };
                    if (!code.includes('for') || !code.includes('in')) return { pass: false, message: 'هل استخدمت حلقة `for` للمرور على كل عناصر الحقيبة؟' };
                    if ((output.split('\n').filter(line => line.trim() !== '').length) < 4) return { pass: false, message: 'يجب أن تطبع العنصر الأول، ثم تطبع كل العناصر في الحلقة. المجموع 4 أسطر على الأقل.' };
                    return { pass: true, message: 'رائع! لقد نظمت بياناتك في هياكل متطورة.' };
                }
            },
            markdownContent: `
## **الفصل السادس: ما بعد الأساسيات (نظرة إلى المستقبل)**

لقد أتقنت الآن اللبنات الأساسية الأربع التي تقوم عليها كل لغات البرمجة: **المتغيرات، الشروط، الحلقات، والدوال**. أنت الآن لم تعد مبتدئًا. في هذا الفصل، سنفتح نافذة لنرى ما يكمن في المستقبل.

### **6.1 - تنظيم البيانات: صناديق أكبر وأذكى**

حتى الآن، كان كل متغير يتسع لشيء واحد فقط. لكن ماذا لو أردت تخزين قائمة بكل الأسلحة في حقيبة اللاعب؟ هنا يأتي دور **القائمة (List)**.

القائمة هي سلسلة مرتبة من العناصر، نضعها بين قوسين مربعين \`[]\` ونفصل بينها بفاصلة.

\`\`\`python
# قائمة من النصوص
inventory = ["سيف حديدي", "درع جلدي", "جرعة صحة", "خريطة قديمة"]

# قائمة من الأرقام
high_scores = [1500, 1240, 990, 850]

# يمكننا الوصول إلى أي عنصر باستخدام "فهرسه" (Index)
# تذكر: العد في البرمجة يبدأ دائمًا من صفر!
first_item = inventory[0]  # سيحتوي على "سيف حديدي"
third_score = high_scores[2] # سيحتوي على 990

print(f"أول عنصر في حقيبتك هو: {first_item}")

# يمكننا استخدام الحلقات للمرور على كل عناصر القائمة بسهولة!
print("\\nمحتويات الحقيبة:")
for item in inventory:
    print(f"- {item}")
\`\`\`

### **6.2 - البرمجة الكائنية التوجه (OOP): بناء عالم من الكائنات**

هذا هو المفهوم الأكبر الذي ستواجهه في رحلتك المتقدمة. إنه طريقة تفكير كاملة حول بناء البرامج. الفكرة هي تجميع **البيانات** (مثل \`player_health\`) و**الأفعال** (مثل دالة \`attack()\`) التي تخص نفس الشيء معًا في حزمة واحدة متكاملة تسمى **"كائن" (Object)**.

هذا المفهوم يسمح ببناء برامج ضخمة ومنظمة تشبه طريقة عمل العالم الحقيقي.

### **6.3 - استيراد قوى الآخرين الخارقة: عالم المكتبات**

أفضل جزء في بايثون هو أنك لست وحدك. هناك مجتمع ضخم من المبرمجين الذين قاموا ببناء أدوات مذهلة وحزموها في **مكتبات (Libraries)** يمكنك استيرادها بكلمة واحدة \`import\` واستخدامها فورًا.
*   هل تريد بناء لعبة برسوميات؟ \`import pygame\`
*   هل تريد بناء تطبيق ذكاء اصطناعي؟ \`import tensorflow\`

### **6.4 - خاتمة الرحلة وبداية المغامرة**

لقد حصلت الآن على الخريطة، والبوصلة، والأدوات الأساسية. الطريق أمامك مفتوح لتستكشفه بنفسك. البرمجة ليست مجرد مهارة تقنية، بل هي طريقة جديدة في التفكير المنطقي وحل المشكلات.

<div class="mission-section" id="mission-chapter6">
    <h3>🚀 مهمتك السادسة (مفتاح المكافأة)</h3>
    <p><strong>المهمة (حقيبة اللاعب):</strong></p>
    <ol>
        <li>أنشئ قائمة (List) اسمها <code>inventory</code> تحتوي على 3 أسلحة نصية على الأقل (مثال: <code>["سيف", "قوس", "فأس"]</code>).</li>
        <li>اطبع أول عنصر في الحقيبة باستخدام الفهرس <code>[0]</code>.</li>
        <li>استخدم حلقة <code>for</code> للمرور على كل عنصر في الحقيبة وطباعته في سطر منفصل.</li>
    </ol>
    <div id="mission-editor-chapter6" class="mission-editor"></div>
    <pre class="code-output" id="mission-output-chapter6"></pre>
    <div class="mission-controls">
        <button class="mission-btn" data-chapter-id="chapter6">إتمام المهمة</button>
        <button class="mission-btn download-code-btn" data-chapter-id="chapter6">تحميل الكود</button>
    </div>
</div>
`
        },
        {
            id: 'conclusion',
            title: 'النهاية: أنت تحمل المفتاح',
            icon: '🔑',
            markdownContent: `
# **نهاية الكتاب: أنت الآن تحمل المفتاح**

وهكذا، نصل إلى الصفحة الأخيرة من دليلنا، ولكنها الصفحة الأولى في قصتك كمبرمج. إذا وصلت إلى هنا، وأكملت المهام، وتحديت نفسك، فأنت تستحق تهنئة من القلب. انظر إلى ما أنجزته: لقد بدأت من الصفر، من مجرد فكرة غامضة عن "الكود"، والآن أنت تفهم لغة الحاسوب، وتستطيع أن تأمره بأن يتذكر ويفكر ويكرر وينظم. أنت لم تعد مجرد مستهلك للتكنولوجيا، بل أصبحت مشاركًا في صنعها.

### **رحلتك القادمة: من أين تبدأ المغامرة؟**

قد تسأل نفسك الآن: "حسنًا، لقد تعلمت الأساسيات، فماذا أفعل بكل هذه القوة؟". هذا هو السؤال الأجمل على الإطلاق، وإليك بعض المسارات التي يمكنك أن تبدأ في استكشافها فورًا:

**1. طريق صانع الألعاب:**
*   **الأداة المقترحة:** ابدأ بتعلم مكتبة **Pygame**. إنها مكتبة مصممة خصيصًا لصناعة الألعاب ثنائية الأبعاد في بايثون.

**2. طريق مهندس التطبيقات والمواقع:**
*   **الأداة المقترحة:** استكشف أُطر عمل الويب مثل **Flask** أو **Django**.

**3. طريق عالم البيانات والمحلل الذكي:**
*   **الأداة المقترحة:** ابدأ باللعب بمكتبات مثل **Pandas** لتحليل البيانات و **Matplotlib** لرسمها.

### **نصائح أخيرة للمستكشف الشجاع**

*   **ابنِ ما تحب:** أفضل طريقة للاستمرار في التعلم هي أن تعمل على مشروع يثير شغفك أنت.
*   **اقرأ أكواد الآخرين:** واحد من أفضل طرق التعلم هو الذهاب إلى مواقع مثل **GitHub** والبحث عن مشاريع بسيطة.
*   **لا تخف من طلب المساعدة:** عندما تواجه مشكلة، ابحث في جوجل، واسأل في منتديات المبرمجين مثل Stack Overflow.
*   **احتفل بإنجازاتك الصغيرة:** البرمجة هي سلسلة من الانتصارات الصغيرة التي تبني شيئًا كبيرًا في النهاية.

لقد منحك هذا الكتاب المفتاح لعالم جديد. العالم الرقمي ينتظر أفكارك وإبداعك.

**بالتوفيق، يا صانع العوالم!**

<div id="certificate-section">
    <!-- Certificate will be generated here by JavaScript after completion -->
</div>
`
        }
    ],
    achievements: {
        'start_journey': { title: 'بداية الرحلة', description: 'بدأت مغامرتك في عالم البرمجة.', icon: '🚀' },
        'first_code': { title: 'أول سطر كود', description: 'أمرت الحاسوب بنجاح لأول مرة!', icon: '💬' },
        'variable_tamer': { title: 'مروض المتغيرات', description: 'أتقنت فن تخزين البيانات.', icon: '📦' },
        'logic_master': { title: 'سيد المنطق', description: 'منحت برامجك القدرة على اتخاذ القرار.', icon: '🧠' },
        'loop_sorcerer': { title: 'ساحر الحلقات', description: 'تحكمت في قوة التكرار.', icon: '🔄' },
        'function_architect': { title: 'مهندس الدوال', description: 'بدأت في بناء أدواتك الخاصة.', icon: '🛠️' },
        'future_seer': { title: 'رائي المستقبل', description: 'ألقيت نظرة على المفاهيم المتقدمة.', icon: '🔭' },
        'world_builder': { title: 'صانع العوالم', description: 'أكملت رحلة الأساسيات بنجاح!', icon: '👑' },
    }
}

export default DB;